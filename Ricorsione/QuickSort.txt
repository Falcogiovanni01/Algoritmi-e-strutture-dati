public class QuickSort {

    // Metodo principale per chiamare QuickSort
    public static void quickSort(int[] array, int start, int end) {
        if (start < end) {
            int partitionIndex = partition(array, start, end);

            // Ordina ricorsivamente le due partizioni
            quickSort(array, start, partitionIndex - 1);
            quickSort(array, partitionIndex + 1, end);
        }
    }

    // Metodo per dividere l'array
    private static int partition(int[] array, int start, int end) {
        int pivot = array[end]; // Scegliamo il pivot come ultimo elemento
        int i = (start - 1);

        for (int j = start; j < end; j++) {
            if (array[j] <= pivot) {
                i++;
                // Scambio degli elementi
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }

        // Posizionamento del pivot nella posizione corretta
        int temp = array[i + 1];
        array[i + 1] = array[end];
        array[end] = temp;

        return i + 1; // Restituisce l'indice del pivot
    }

    // Metodo per stampare l'array
    public static void printArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }

    // Metodo main per testare il Quick Sort
    public static void main(String[] args) {
        int[] array = { 34, 7, 23, 32, 5, 62 };
        System.out.println("Array originale:");
        printArray(array);

        quickSort(array, 0, array.length - 1);

        System.out.println("Array ordinato:");
        printArray(array);
    }
}
